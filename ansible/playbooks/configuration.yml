---
- name: Yii 2 App Configuration
  hosts: all
  become: yes
  tasks:

    # System Update
    - name: System Update
      yum:
        name: "*"
        state: latest

    # DOCKER
    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: yes

    - name: Install Docker
      when: docker_check.rc != 0
      block:
        - name: Install Docker package
          yum:
            name: docker
            state: present

        - name: Enable and start Docker service
          systemd:
            name: docker
            enabled: yes
            state: started

        - name: Add ec2-user to docker group
          user:
            name: ec2-user
            groups: docker
            append: yes

    # DOCKER COMPOSE
    - name: Check if Docker Compose is installed
      command: docker-compose --version
      register: docker_compose_check
      ignore_errors: yes

    - name: Install Docker Compose if not present
      when: docker_compose_check.rc != 0
      block:
        - name: Download the latest Docker Compose version
          get_url:
            url: "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)"
            dest: /usr/local/bin/docker-compose
            mode: 'u+x'

        - name: Verify Docker Compose installation
          command: docker-compose --version
          register: docker_compose_version

        - name: Output Docker Compose version
          debug:
            msg: "Docker Compose version: {{ docker_compose_version.stdout }}"

    # DOCKER SWARM
    - name: Check if Docker Swarm is initialized
      command: docker info
      register: docker_info
      ignore_errors: yes

    - name: Initialize Docker Swarm if not initialized
      when: "'Swarm: active' not in docker_info.stdout"
      block:
        - name: Initialize Docker Swarm
          command: docker swarm init
        - name: Display Swarm status
          command: docker info
          register: swarm_status
        - name: Display Docker Swarm initialization status
          debug:
            msg: "Docker Swarm has been initialized: {{ swarm_status.stdout }}"

    # NGINX
    - name: Check if NGINX is installed
      command: nginx -v
      register: nginx_check
      ignore_errors: yes

    - name: Install NGINX if not present
      when: nginx_check.rc != 0
      block:
        - name: Install NGINX package
          yum:
            name: nginx
            state: present

        - name: Enable and start NGINX service
          systemd:
            name: nginx
            enabled: yes
            state: started

        - name: Add ec2-user to nginx group
          user:
            name: ec2-user
            groups: nginx
            append: yes

    # PROMETHEUS
    - name: Check if Prometheus is installed
      command: prometheus --version
      register: prometheus_check
      ignore_errors: yes

    - name: Install Prometheus if not present
      when: prometheus_check.rc != 0
      block:
        - name: Create Prometheus user
          user:
            name: prometheus
            state: present

        - name: Create Prometheus directories
          file:
            path: "{{ item }}"
            state: directory
            owner: prometheus
            group: prometheus
          loop:
            - /etc/prometheus
            - /var/lib/prometheus
            - /var/log/prometheus

        - name: Download Prometheus tarball
          get_url:
            url: https://github.com/prometheus/prometheus/releases/download/v2.41.0/prometheus-2.41.0.linux-amd64.tar.gz
            dest: /tmp/prometheus.tar.gz

        - name: Extract Prometheus tarball
          unarchive:
            src: /tmp/prometheus.tar.gz
            dest: /usr/local/bin/
            remote_src: yes

        - name: Set ownership for Prometheus files
          command: chown -R prometheus:prometheus /usr/local/bin/prometheus-2.41.0.linux-amd64

        - name: Create Prometheus systemd service file
          copy:
            dest: /etc/systemd/system/prometheus.service
            content: |
              [Unit]
              Description=Prometheus
              Documentation=https://prometheus.io/docs/introduction/overview/
              After=network.target

              [Service]
              User=prometheus
              ExecStart=/usr/local/bin/prometheus-2.41.0.linux-amd64/prometheus --config.file=/etc/prometheus/prometheus.yml --web.listen-address=:4545 --storage.tsdb.path=/var/lib/prometheus/

              [Install]
              WantedBy=multi-user.target

        - name: Reload systemd to recognize Prometheus service
          systemd:
            daemon_reload: yes

        - name: Start Prometheus service
          systemd:
            name: prometheus
            state: started
            enabled: yes

    # NODE EXPORTER
    - name: Check if Node Exporter is installed
      command: node_exporter --version
      register: node_exporter_check
      ignore_errors: yes

    - name: Install Node Exporter if not present
      when: node_exporter_check.rc != 0
      block:
        - name: Download Node Exporter tarball
          get_url:
            url: https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
            dest: /tmp/node_exporter.tar.gz

        - name: Extract Node Exporter tarball
          unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /usr/local/bin/
            remote_src: yes

        - name: Create Node Exporter systemd service
          copy:
            dest: /etc/systemd/system/node_exporter.service
            content: |
              [Unit]
              Description=Node Exporter
              After=network.target

              [Service]
              User=root
              ExecStart=/usr/local/bin/node_exporter-1.3.1.linux-amd64/node_exporter

              [Install]
              WantedBy=multi-user.target

        - name: Start Node Exporter service
          systemd:
            name: node_exporter
            state: started
            enabled: yes

    # CRON JOBS FOR AUTO START
    - name: Ensure crontab is installed
      package:
        name: cron
        state: present

    - name: Ensure crontab service is started and enabled
      systemd:
        name: cron
        state: started
        enabled: yes

    - name: Add cron jobs for service auto-start on reboot
      cron:
        name: "{{ item.name }}"
        special_time: reboot
        job: "{{ item.job }}"
        state: present
      loop:
        - { name: "Start Docker", job: "/usr/bin/systemctl start docker" }
        - { name: "Start Docker Compose", job: "docker-compose -f /path/to/docker-compose.yml up -d" }
        - { name: "Start Docker Swarm", job: "/usr/bin/docker swarm init || true" }
        - { name: "Start Nginx", job: "/usr/bin/systemctl start nginx" }
        - { name: "Start Prometheus", job: "/usr/bin/systemctl start prometheus" }
        - { name: "Start Node Exporter", job: "/usr/bin/systemctl start node_exporter" }
