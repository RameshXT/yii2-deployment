name: Yii 2 CICD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: CODE CHECKOUT
        uses: actions/checkout@v4

      - name: SSH into EC2 and echo message
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Hello, I'm from inside the EC2 instance!"

            # CLONE & PULL THE PROJECT
            if [ -d "/home/ec2-user/yii2-deployment" ]; then
              echo "Project already cloned, pulling latest changes..."
              sudo chown -R ec2-user:ec2-user /home/ec2-user/yii2-deployment
              sudo chmod -R 755 /home/ec2-user/yii2-deployment
              cd /home/ec2-user/yii2-deployment
              # Overwrite local changes and pull the latest from the master branch
              git fetch --all
              git reset --hard origin/master
            else
              echo "Project directory doesn't exist, cloning repository..."
              git clone https://github.com/RameshXT/yii2-deployment.git /home/ec2-user/yii2-deployment
            fi


            # DOCKER LOGIN
            # docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            # DOCKER CLEANUP
            # cd /home/ec2-user/yii2-deployment && docker rm -f $(docker ps -aq) 2>/dev/null; docker rmi -f $(docker images -aq) 2>/dev/null; docker volume prune -f; docker network prune -f

            # COMPOSER INSTALL
            # cd /home/ec2-user/yii2-deployment && composer install

            # IMAGE TAG
            IMAGE_TAG="rameshxt/yii2:v1.0.${{ github.run_number }}"
            # echo "Building Docker image with tag: $IMAGE_TAG"

            # DOCKER BUILD
            # docker build -t $IMAGE_TAG /home/ec2-user/yii2-deployment

            # DOCKER PUSH
            # docker push $IMAGE_TAG

            # DOCKER COMPOSE
            # cd /home/ec2-user/yii2-deployment && docker-compose up -d --build

            # IMAGE UPDATER Docker-stack.yml
            # cd /home/ec2-user/yii2-deployment && chmod +x image-updater.sh
            # cd /home/ec2-user/yii2-deployment && bash image-updater.sh "$IMAGE_TAG"

      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Ansible
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      # Step 3: Setup SSH key for Ansible
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/Primary.pem
          chmod 400 ~/.ssh/Primary.pem
          # Add EC2 host to known_hosts (to avoid SSH warnings)
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      # Step 4: Run Ansible playbook
      - name: Run Ansible playbook
        run: |
          cd nginx-reverse-proxy
          ansible-playbook -i inventory.ini playbook.yml --private-key ~/.ssh/Primary.pem
