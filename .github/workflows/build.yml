name: Medusa CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: CODE CHECKOUT
        uses: actions/checkout@v2

      - name: SET UP DOCKER BUILDx
        uses: docker/setup-buildx-action@v3

      - name: LOGIN DOCKER HUB
        run: |
          echo "Logging into Docker Hub.."
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          echo "Logged in to Docker Hub."

      - name: BUILD DOCKER IMAGE
        run: |
          IMAGE_TAG="rameshxt/yii2:v1.0.${GITHUB_RUN_NUMBER}"
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "Image build complete."

      - name: PUSH DOCKER IMAGES..
        run: |
          IMAGE_TAG="rameshxt/yii2:v1.0.${GITHUB_RUN_NUMBER}"
          echo "Pushing Docker image: $IMAGE_TAG"
          docker push "$IMAGE_TAG"
          echo "Image pushed to Docker Hub."

      # Step 4: Pull changes from GitHub
      - name: Pull changes from GitHub and manage Docker containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} << 'EOF'
            cd /home/ec2-user/yii2-deployment || exit 0
            git pull origin master

            # Step 1: Force delete all running containers and images
            CONTAINERS=$(docker ps -aq)
            if [ ! -z "$CONTAINERS" ]; then
              docker stop $CONTAINERS
              docker rm -f $CONTAINERS
            fi

            IMAGES=$(docker images -aq)
            if [ ! -z "$IMAGES" ]; then
              docker rmi -f $IMAGES
            fi

            # Step 2: Run the new Docker container
            IMAGE_TAG="rameshxt/yii2:v1.0.${GITHUB_RUN_NUMBER}"
            docker run -d -p 8080:8080 --name yii2-container $IMAGE_TAG

            # Optional: Tail logs to verify the container is running
            docker logs -f $(docker ps -q -f name=yii2)
          EOF
